COMPOSE_FILE=compose.yaml

GH_PAGER=""

RUST_BACKTRACE=1
RUST_LOG=warn,tansu_server=debug,tansu_storage=debug,tansu_cli=debug,tansu_topic=debug,tansu_cat=debug,tansu_schema_registry=debug

TANSU_IMAGE=ghcr.io/tansu-io/tansu:pr-280

# Kafka cluster:
CLUSTER_ID="RvQwrYegSUCkIPkaiAZQlQ"

PULL_POLICY=missing

ADVERTISED_LISTENER="localhost:9092"
ADVERTISED_LISTENER_URL="tcp://${ADVERTISED_LISTENER}"

PROMETHEUS_LISTENER_URL="tcp://0.0.0.0:9100"

# create an access key for minio at:
# http://localhost:9001/access-keys
AWS_ACCESS_KEY_ID="minioadmin"
AWS_SECRET_ACCESS_KEY="minioadmin"

AWS_DEFAULT_REGION="eu-west-2"

# use this endpoint when tansu and minio are both running in docker compose:
AWS_ENDPOINT="http://minio:9000"

# use this endpoint when running tansu directly from the command line with
# minio running in compose
AWS_ENDPOINT="http://localhost:9000"

# enable http requests for a local minio
AWS_ALLOW_HTTP="true"

# minio storage engine
# create a bucket "tansu" at: http://localhost:9001/buckets
# or: mc mb local/tansu
STORAGE_ENGINE="s3://tansu/"

# memory storage engine
# STORAGE_ENGINE="memory://tansu/"

# use this endpoint when tansu and postgreSQL are both running in docker compose:
# STORAGE_ENGINE="postgres://postgres:postgres@db"

# STORAGE_ENGINE="postgres://postgres:postgres@localhost"

DATA_LAKE="s3://lake/"

SCHEMA_REGISTRY="file://./etc/schema"
